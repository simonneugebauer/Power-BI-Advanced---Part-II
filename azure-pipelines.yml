# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

parameters:
- name: organization
  type: string
  default: 'qunisgmbh'
- name: project
  type: string
  default: 'QUNIS - Academy'
- name: repository
  type: string
  default: 'QUNIS - Academy'
- name: sourceBranch
  type: string
  default: 'main'
- name: targetBranch
  type: string
  default: 'QUNIS_Development'

variables:
  organization: ${{ parameters.organization }}
  project: ${{ parameters.project }}
  repository: ${{ parameters.repository }}
  sourceBranch: ${{ parameters.sourceBranch }}
  targetBranch: ${{ parameters.targetBranch }}

pool:
  vmImage: 'windows-latest'

steps:
- task: PowerShell@2
  displayName: 'Generate Branch Compare Excel'
  inputs:
    targetType: 'inline'
    script: |
      $ErrorActionPreference = "Continue"
      $VerbosePreference = "Continue"
      
      function Write-Log {
          param([string]$message)
          Write-Host "##[command]$message"
      }
      
      try {
        Write-Log "Starting script execution"
        
        # Verwenden der Parameter
        $organization = "$(organization)"
        $project = "$(project)"
        $repository = "$(repository)"
        $sourceBranch = "$(sourceBranch)"
        $targetBranch = "$(targetBranch)"
        
        Write-Log "Parameters: Org=$organization, Project=$project, Repo=$repository, Source=$sourceBranch, Target=$targetBranch"
        
        # Installieren und Importieren des ImportExcel-Moduls
        Install-Module -Name ImportExcel -Force -Scope CurrentUser -ErrorAction Stop
        Import-Module ImportExcel -ErrorAction Stop
        
        # Authentifizierung und API-Aufrufe
        $token = "$(System.AccessToken)"
        $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($token)"))
        
        $orgUrl = "https://dev.azure.com/$organization"
        $url = "$orgUrl/$project/_apis/git/repositories/$repository/diffs/commits?baseVersion=$sourceBranch&targetVersion=$targetBranch&api-version=6.0"
        $response = Invoke-RestMethod -Uri $url -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -Method GET -ErrorAction Stop
        
        $changedFiles = $response.changes | Where-Object { $_.changeType -ne "Delete" } | Select-Object -ExpandProperty item
        
        # Excel-Datei erstellen
        $excelPackage = New-Object OfficeOpenXml.ExcelPackage
        $worksheet = $excelPackage.Workbook.Worksheets.Add("Changes")
        
        $row = 1
        foreach ($file in $changedFiles) {
            # Dateiinhalte abrufen und vergleichen
            $sourceUrl = "$orgUrl/$project/_apis/git/repositories/$repository/items?path=$($file.path)&versionDescriptor.version=$sourceBranch&api-version=6.0"
            $targetUrl = "$orgUrl/$project/_apis/git/repositories/$repository/items?path=$($file.path)&versionDescriptor.version=$targetBranch&api-version=6.0"
            
            $sourceContent = Invoke-RestMethod -Uri $sourceUrl -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -Method GET -ErrorAction Stop
            $targetContent = Invoke-RestMethod -Uri $targetUrl -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -Method GET -ErrorAction Stop
            
            # Excel-Datei bef√ºllen
            # (Rest des Excel-Erstellungscodes bleibt gleich)
        }
        
        $excelPath = "$(Build.ArtifactStagingDirectory)\BranchCompare.xlsx"
        $excelPackage.SaveAs($excelPath)
        
        Write-Log "Excel file saved to: $excelPath"
      }
      catch {
        Write-Error "An error occurred: $_"
        Write-Error "Stack Trace: $($_.ScriptStackTrace)"
        throw $_
      }
      finally {
        if ($null -ne $excelPackage) {
          $excelPackage.Dispose()
        }
      }

- task: PowerShell@2
  displayName: 'Download Branch Compare Excel'
  inputs:
    targetType: 'inline'
    script: |
      $downloadPath = "$(Build.SourcesDirectory)\DownloadedArtifacts"
      New-Item -ItemType Directory -Force -Path $downloadPath

      $url = "https://dev.azure.com/$(organization)/$(project)/_apis/build/builds/$(Build.BuildId)/artifacts?artifactName=BranchCompare&api-version=6.0"
      $token = "$(System.AccessToken)"
      $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($token)"))

      $artifactResponse = Invoke-RestMethod -Uri $url -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -Method Get

      if ($artifactResponse.resource.downloadUrl) {
          $downloadUrl = $artifactResponse.resource.downloadUrl
          $zipPath = Join-Path $downloadPath "artifact.zip"
          Invoke-WebRequest -Uri $downloadUrl -Headers @{Authorization=("Basic {0}" -f $base64AuthInfo)} -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath $downloadPath -Force
          Remove-Item $zipPath
          Write-Host "Artefakt erfolgreich heruntergeladen und entpackt in: $downloadPath"
      } else {
          Write-Error "Konnte das Artefakt nicht finden oder herunterladen."
      }

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'BranchCompare'
  condition: succeededOrFailed()